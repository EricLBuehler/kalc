use std::collections::HashSet;
pub fn functions() -> HashSet<&'static str>
{
    [
        "sum",
        "product",
        "prod",
        "summation",
        "cofactor",
        "cofactors",
        "cof",
        "minor",
        "minors",
        "adjugate",
        "adj",
        "inv",
        "inverse",
        "transpose",
        "trans",
        "len",
        "length",
        "wid",
        "width",
        "tr",
        "trace",
        "det",
        "determinant",
        "part",
        "norm",
        "abs",
        "normalize",
        "car",
        "cartesian",
        "polar",
        "pol",
        "angle",
        "cross",
        "proj",
        "project",
        "dot",
        "rotate",
        "sin",
        "csc",
        "cos",
        "sec",
        "tan",
        "cot",
        "asin",
        "arcsin",
        "acsc",
        "arccsc",
        "acos",
        "arccos",
        "asec",
        "arcsec",
        "atan",
        "arctan",
        "atan2",
        "acot",
        "arccot",
        "sinh",
        "csch",
        "cosh",
        "sech",
        "tanh",
        "coth",
        "asinh",
        "arcsinh",
        "acsch",
        "arccsch",
        "acosh",
        "arccosh",
        "asech",
        "arcsech",
        "atanh",
        "arctanh",
        "acoth",
        "arccoth",
        "cis",
        "ln",
        "ceil",
        "floor",
        "round",
        "recip",
        "exp",
        "log",
        "root",
        "bi",
        "binomial",
        "gamma",
        "max",
        "min",
        "sqrt",
        "re",
        "real",
        "im",
        "imag",
        "sgn",
        "sign",
        "arg",
        "cbrt",
        "frac",
        "fract",
        "int",
        "trunc",
        "square",
        "cube",
        "fact",
        "subfact",
        "sinc",
        "conj",
        "conjugate",
        "erf",
        "erfc",
        "ai",
        "digamma",
        "zeta",
        "sort",
        "Γ",
        "ζ",
        "Σ",
        "Π",
        "factor",
        "factors",
        "vec",
        "all",
        "any",
        "eigenvalues",
        "eigenvectors",
        "mat",
        "prime",
        "reverse",
        "link",
        "flatten",
        "I",
        "P",
        "C",
        "split",
        "slog",
        "doublefact",
        "mean",
        "median",
        "mode",
        "quad",
        "quadratic",
        "cubic",
        "standarddeviation",
        "variance",
        "tolist",
        "tofreq",
        "σ",
        "var",
        "quartiles",
        "percentile",
        "percentilerank",
        "normD",
        "normP",
        "piecewise",
        "pw",
        "is_prime",
        "isprime",
        "dice",
        "μ",
        "W",
        "productlog",
        "lambertw",
        "ssrt",
        "gcd",
        "gcf",
        "lcm",
        "multinomial",
        "Β",
        "B",
        "beta",
        "betaP",
        "betaC",
        "slope",
        "lim",
        "limit",
        "D",
        "area",
        "∫",
        "integrate",
        "arclength",
        "roll",
        "erfi",
        "polygamma",
        "trigamma",
        "pochhammer",
        "ph",
        "ψ",
        "next",
        "factorial",
        "doublefactorial",
        "subfactorial",
        "units",
        "An",
        "Ap",
        "eta",
        "η",
        "iden",
        "identity",
        "quartic",
        "solve",
        "inter",
        "interpolate",
        "unity",
        "iter",
        "rand_weighted",
        "lobf",
        "lineofbestfit",
        "onlyreal",
        "onlyre",
        "ore",
        "onlyimag",
        "onlyim",
        "oim",
        "mod",
        "cossin",
        "sincos",
        "surfacearea",
        "sarea",
        "cov",
        "covariance",
        "extrema",
        "plane",
        "is_nan",
        "is_inf",
        "is_fin",
        "is_finite",
        "nth_prime",
        "rand_norm",
        "rand_uniform",
        "rand_int",
        "geo_mean",
        "γ",
        "lower_gamma",
        "gamma_pdf",
        "gamma_cdf",
        "beta_cdf",
        "beta_pdf",
        "norm_cdf",
        "norm_pdf",
        "rand_gamma",
        "rand_beta",
        "skewness",
        "weighted_mean",
    ]
    .iter()
    .cloned()
    .collect::<HashSet<&str>>()
}
pub fn functions_with_args() -> HashSet<&'static str>
{
    [
        "sum(a,f(a),start,end)",
        "sum(vec)",
        "prod(a,f(a),start,end)",
        "prod(vec)",
        "Σ(a,f(a),start,end)",
        "Π(a,f(a),start,end)",
        "cofactor(mat)",
        "minor(mat)",
        "adjugate(mat)",
        "inverse(mat)",
        "transpose(mat)",
        "length(vec/mat)",
        "width(vec/mat)",
        "trace(mat)",
        "determinant(mat)",
        "part(mat,x(,y))",
        "part(vec,x)",
        "norm(num/vec/mat)",
        "abs(num/vec/mat)",
        "normalize(vec)",
        "cartesian(vec)",
        "polar(vec)",
        "angle(vec(,vec))",
        "cross(vec,vec)",
        "project(vec,vec)",
        "dot(vec,vec)",
        "rotate(θ)",
        "rotate(yaw,pitch,roll)",
        "sin(x)",
        "csc(x)",
        "cos(x)",
        "sec(x)",
        "tan(x)",
        "cot(x)",
        "asin(x)",
        "acsc(x)",
        "acos(x)",
        "asec(x)",
        "atan(x(,y))",
        "atan2(y,x)",
        "acot(x)",
        "sinh(x)",
        "csch(x)",
        "cosh(x)",
        "sech(x)",
        "tanh(x)",
        "coth(x)",
        "asinh(x)",
        "acsch(x)",
        "acosh(x)",
        "asech(x)",
        "atanh(x)",
        "acoth(x)",
        "cis(x)",
        "ln(x)",
        "ceil(x)",
        "floor(x)",
        "round(x)",
        "recip(x)",
        "exp(x(,y))",
        "log((b,)p)",
        "root(b(,p))",
        "bi(n,r)",
        "gamma(s(,x))",
        "max(vec/mat)",
        "min(vec/mat)",
        "sqrt(x)",
        "re(x)",
        "im(x)",
        "sgn(x)",
        "arg(x)",
        "cbrt(x)",
        "fract(x)",
        "int(x)",
        "trunc(x)",
        "fact(x)",
        "subfact(x)",
        "sinc(x)",
        "conj(x)",
        "erf(x)",
        "erfc(x)",
        "ai(x)",
        "digamma((m,)x)",
        "zeta(x)",
        "sort(vec/mat)",
        "Γ(x)",
        "ζ(x)",
        "factors(x)",
        "vec(a,f(a),start,end)",
        "all(vec)",
        "any(vec)",
        "eigenvalues(mat)",
        "eigenvectors(mat)",
        "mat(a,f(a),start,end)",
        "reverse(vec)",
        "link(vec,vec)",
        "flatten(mat)",
        "I(x,α,β)",
        "P(n,r)",
        "C(n,r)",
        "split(x)",
        "slog(b,p)",
        "doublefact(x)",
        "mean(vec)",
        "weighted_mean(mat)",
        "median(vec)",
        "mode(vec)",
        "quadratic(a,b,c(,real))",
        "cubic(a,b,c,d(,real))",
        "standarddeviation(vec)",
        "variance(vec)",
        "tolist(mat)",
        "tofreq(vec)",
        "σ(vec)",
        "quartiles(vec)",
        "percentile(vec,nth)",
        "percentilerank(vec,x)",
        "norm_cdf(x,μ,σ)",
        "norm_pdf(x,μ,σ)",
        "piecewise({f(x),bool},{g(x),bool}...)",
        "is_prime(x)",
        "dice(vec/mat)",
        "μ(vec)",
        "W((k,),x)",
        "productlog((k,),x)",
        "lambertw((k,),x)",
        "ssrt((k,),x)",
        "gcd(x,y)",
        "lcm(x,y)",
        "multinomial(a,b,c...)",
        "Β((z,)a,b)",
        "B((z,)a,b)",
        "beta((z,)a,b)",
        "beta_pdf(x,α,β)",
        "beta_cdf(x,α,β)",
        "slope(a,f(a),x(,nth)(,combine))",
        "lim(a,f(a),x(,side))",
        "area(a,f(a),start,end(,combine)",
        "arclength(a,f(a),start,end)",
        "roll(vec/mat)",
        "erfi(x)",
        "pochhammer(x,n)",
        "next(x(,to))",
        "units(x)",
        "An(n,k)",
        "Ap(n,t)",
        "eta(x)",
        "η(x)",
        "identity(n)",
        "quartic(a,b,c,d,e(,real))",
        "solve(a,f(a)(,start))",
        "interpolate(mat,x)",
        "unity(b,p)",
        "iter(a,f(a),x,n(,steps))",
        "rand_weighted(mat)",
        "lineofbestfit(mat(,x))",
        "onlyreal(x)",
        "onlyimag(x)",
        "mod(a,b)",
        "cossin(x)",
        "sincos(x)",
        "surfacearea(a,b,z(a,b),start_b,end_b,start_a,end_a)",
        "covariance(vec)",
        "extrema(a,f(a)(,start))",
        "plane(mat(,x,y)",
        "is_nan(x)",
        "is_inf(x)",
        "is_finite(x)",
        "nth_prime(n)",
        "rand_norm(μ,σ)",
        "rand_int(a,b)",
        "rand_uniform(a,b)",
        "geo_mean(vec)",
        "γ(s(,x))",
        "lower_gamma(s(,x))",
        "gamma_pdf(k,θ)",
        "gamma_cdf(k,θ)",
        "rand_gamma(k,θ)",
        "rand_beta(k,θ)",
        "skewness(vec)",
    ]
    .iter()
    .cloned()
    .collect::<HashSet<&str>>()
}
